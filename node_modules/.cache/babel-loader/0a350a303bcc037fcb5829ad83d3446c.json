{"ast":null,"code":"var _jsxFileName = \"/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js\";\nimport React, { Component } from \"react\"; //import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n//import getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      valorActual: \"\",\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      /*try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n         // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n         // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          SimpleStorageContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n         // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }*/\n    };\n\n    this.runExample = async () => {\n      /*const { accounts, contract } = this.state;\n       // Stores a given value, 5 by default.\n      await contract.methods.set(5).send({ from: accounts[0] });\n       // Get the value from the contract to prove it worked.\n      const response = await contract.methods.get().call();\n       // Update state with the result.\n      this.setState({ storageValue: response });*/\n    };\n  }\n\n  render() {\n    /* if (!this.state.web3) {\n       return <div>Loading Web3, accounts, and contract...</div>;\n     }*/\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"EscribirEnLaBlockchain mundo \"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"El valor en la blockchain es : (this.state.ValorActual)\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js"],"names":["React","Component","App","state","valorActual","web3","accounts","contract","componentDidMount","runExample","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB;AACNC,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,IAAI,EAAE,IAFA;AAGNC,MAAAA,QAAQ,EAAE,IAHJ;AAINC,MAAAA,QAAQ,EAAE;AAJJ,KADkB;;AAAA,SAQ1BC,iBAR0B,GAQN,YAAY;AAC9B;;;;;;;;;;;;;;;;;;;;;;AAyBD,KAlCyB;;AAAA,SAoC1BC,UApC0B,GAoCb,YAAY;AACvB;;;;;;;AAUD,KA/CyB;AAAA;;AAiD1BC,EAAAA,MAAM,GAAG;AACR;;;AAGC,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFD,CADF;AAOD;;AA5DyB;;AA+D5B,eAAeR,GAAf","sourcesContent":["import React, { Component } from \"react\";\n//import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n//import getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    valorActual: \"\",\n    web3: null, \n    accounts: null, \n    contract: null \n  };\n\n  componentDidMount = async () => {\n    /*try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }*/\n  };\n\n  runExample = async () => {\n    /*const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });*/\n  };\n\n  render() {\n   /* if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }*/\n    return (\n      <div className=\"App\">\n       <h1>EscribirEnLaBlockchain mundo </h1>\n       <label>El valor en la blockchain es : (this.state.ValorActual)</label>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}