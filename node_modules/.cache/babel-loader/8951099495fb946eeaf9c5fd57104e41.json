{"ast":null,"code":"var _jsxFileName = \"/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js\";\nimport React, { Component } from \"react\"; //import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      valorActual: ' ',\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      /*const { accounts, contract } = this.state;\n       // Stores a given value, 5 by default.\n      await contract.methods.set(5).send({ from: accounts[0] });\n       // Get the value from the contract to prove it worked.\n      const response = await contract.methods.get().call();\n       // Update state with the result.\n      this.setState({ storageValue: response });*/\n    };\n  }\n\n  render() {\n    /* if (!this.state.web3) {\n       return <div>Loading Web3, accounts, and contract...</div>;\n     }*/\n    return React.createElement(\"html\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Hola mundo \"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"El valor en la blockchain es : (this.state.ValorActual)\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js"],"names":["React","Component","getWeb3","App","state","valorActual","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","setState","runExample","error","alert","console","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACNC,MAAAA,WAAW,EAAE,GADP;AAENC,MAAAA,IAAI,EAAE,IAFA;AAGNC,MAAAA,QAAQ,EAAE,IAHJ;AAINC,MAAAA,QAAQ,EAAE;AAJJ,KADkB;;AAAA,SAQ1BC,iBAR0B,GAQN,YAAY;AAC/B,UAAI;AACD;AACA,cAAMH,IAAI,GAAG,MAAMJ,OAAO,EAA1B,CAFC,CAID;;AACA,cAAMK,QAAQ,GAAG,MAAMD,IAAI,CAACI,GAAL,CAASC,WAAT,EAAvB,CALC,CAOD;;AACA,cAAMC,SAAS,GAAG,MAAMN,IAAI,CAACI,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGC,qBAAqB,CAACC,QAAtB,CAA+BL,SAA/B,CAAxB;AACA,cAAMM,QAAQ,GAAG,IAAIZ,IAAI,CAACI,GAAL,CAASS,QAAb,CACfH,qBAAqB,CAACI,GADP,EAEfL,eAAe,IAAIA,eAAe,CAACM,OAFpB,CAAjB,CAVC,CAeD;AACA;;AACA,aAAKC,QAAL,CAAc;AAAEhB,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBC,UAAAA,QAAQ,EAAEU;AAA5B,SAAd,EAAsD,KAAKK,UAA3D;AACD,OAlBF,CAkBG,OAAOC,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KAlCyB;;AAAA,SAoC1BD,UApC0B,GAoCb,YAAY;AACvB;;;;;;;AAUD,KA/CyB;AAAA;;AAiD1BI,EAAAA,MAAM,GAAG;AACR;;;AAGC,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFD,CADD,CADD;AAQD;;AA7DyB;;AAgE5B,eAAexB,GAAf","sourcesContent":["import React, { Component } from \"react\";\n//import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    valorActual: ' ',\n    web3: null, \n    accounts: null, \n    contract: null \n  };\n\n  componentDidMount = async () => {\n   try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    /*const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });*/\n  };\n\n  render() {\n   /* if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }*/\n    return (\n     <html>\n      <div className=\"App\">\n       <h1>Hola mundo </h1>\n       <label >El valor en la blockchain es : (this.state.ValorActual)</label>\n      </div>\n      </html>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}