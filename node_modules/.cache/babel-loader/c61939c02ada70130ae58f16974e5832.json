{"ast":null,"code":"var _jsxFileName = \"/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js\";\nimport React, { Component } from \"react\";\nimport EscribirEnLaBlockchain from \"./contracts/EscribirEnLaBlockchain.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      valorActual: \"\",\n      nuevoValor: \"\",\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = EscribirEnLaBlockchain.networks[networkId];\n        const instance = new web3.eth.Contract(EscribirEnLaBlockchain.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n        const response = await this.state.contract.methods.Leer().call();\n        this.setState({\n          valorActual: response\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      /*const { accounts, contract } = this.state;\n       // Stores a given value, 5 by default.\n      await contract.methods.set(5).send({ from: accounts[0] });\n       // Get the value from the contract to prove it worked.\n      const response = await contract.methods.get().call();\n       // Update state with the result.\n      this.setState({ storageValue: response });*/\n    };\n\n    this.handleChangevalue = event => {\n      this.setState({\n        nuevoValor: even.target.value\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"EscribirEnLaBlockchain mundo \"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"El valor en la blodckchain es:  \", this.state.valorActual, \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Nuevo texto\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.nuevoValor,\n      onChange: this.handleChangevalue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"almacenar valor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js"],"names":["React","Component","EscribirEnLaBlockchain","getWeb3","App","state","valorActual","nuevoValor","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","response","methods","Leer","call","error","alert","console","runExample","handleChangevalue","event","even","target","value","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport EscribirEnLaBlockchain from \"./contracts/EscribirEnLaBlockchain.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    valorActual: \"\",\n    nuevoValor: \"\",\n    web3: null, \n    accounts: null, \n    contract: null \n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = EscribirEnLaBlockchain.networks[networkId];\n      const instance = new web3.eth.Contract(\n        EscribirEnLaBlockchain.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n\n      const response = await this.state.contract.methods.Leer().call();\n      this.setState({\n        valorActual :response\n      })\n\n     \n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    /*const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });*/\n  };\n\n  handleChangevalue = (event) => {\n    this.setState ({\n      nuevoValor  : even.target.value\n    })\n  }\n\n  render() {\n   if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n    <div className=\"App\">\n       <h1>EscribirEnLaBlockchain mundo </h1>\n       <label>El valor en la blodckchain es:  {this.state.valorActual} </label>\n       <br/>\n       <form>\n       <label>Nuevo texto</label>\n       <br/>\n       <input type=\"text\" value={this.state.nuevoValor} onChange={this.handleChangevalue}></input>\n       <br/>\n       <input type=\"submit\" value=\"almacenar valor\"></input>\n       </form>\n\n</div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}