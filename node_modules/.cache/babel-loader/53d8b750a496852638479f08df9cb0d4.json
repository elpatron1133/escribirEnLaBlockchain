{"ast":null,"code":"var _jsxFileName = \"/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js\";\nimport React, { Component } from \"react\";\nimport EscribirEnLaBlockchain from \"./contracts/EscribirEnLaBlockchain.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      valorActual: \"\",\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = EscribirEnLaBlockchain.networks[networkId];\n        const instance = new web3.eth.Contract(EscribirEnLaBlockchain.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n        const response = await this.state.contract.method.Leer().call();\n        this.setState({\n          valorActual: response\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      /*const { accounts, contract } = this.state;\n       // Stores a given value, 5 by default.\n      await contract.methods.set(5).send({ from: accounts[0] });\n       // Get the value from the contract to prove it worked.\n      const response = await contract.methods.get().call();\n       // Update state with the result.\n      this.setState({ storageValue: response });*/\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"EscribirEnLaBlockchain mundo \"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"El valor en la blodckchain es:\", this.state.ValorActual));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js"],"names":["React","Component","EscribirEnLaBlockchain","getWeb3","App","state","valorActual","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","response","method","Leer","call","error","alert","console","runExample","render","ValorActual"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,sBAAP,MAAmC,yCAAnC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AACNC,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,IAAI,EAAE,IAFA;AAGNC,MAAAA,QAAQ,EAAE,IAHJ;AAINC,MAAAA,QAAQ,EAAE;AAJJ,KADkB;;AAAA,SAQ1BC,iBAR0B,GAQN,YAAY;AAC9B,UAAI;AACF;AACA,cAAMH,IAAI,GAAG,MAAMJ,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMK,QAAQ,GAAG,MAAMD,IAAI,CAACI,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,cAAMC,SAAS,GAAG,MAAMN,IAAI,CAACI,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGd,sBAAsB,CAACe,QAAvB,CAAgCJ,SAAhC,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAIX,IAAI,CAACI,GAAL,CAASQ,QAAb,CACfjB,sBAAsB,CAACkB,GADR,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CAVE,CAeF;AACA;;AACA,aAAKC,QAAL,CAAc;AAAEf,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBC,UAAAA,QAAQ,EAAES;AAA5B,SAAd;AAEA,cAAMK,QAAQ,GAAG,MAAM,KAAKlB,KAAL,CAAWI,QAAX,CAAoBe,MAApB,CAA2BC,IAA3B,GAAkCC,IAAlC,EAAvB;AACA,aAAKJ,QAAL,CAAc;AACZhB,UAAAA,WAAW,EAAEiB;AADD,SAAd;AAMD,OA1BD,CA0BE,OAAOI,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KA1CyB;;AAAA,SA4C1BG,UA5C0B,GA4Cb,YAAY;AACvB;;;;;;;AAUD,KAvDyB;AAAA;;AAyD1BC,EAAAA,MAAM,GAAG;AACR,QAAI,CAAC,KAAK1B,KAAL,CAAWE,IAAhB,EAAsB;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAsC,KAAKF,KAAL,CAAW2B,WAAjD,CAFD,CADF;AAOD;;AApEyB;;AAuE5B,eAAe5B,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport EscribirEnLaBlockchain from \"./contracts/EscribirEnLaBlockchain.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    valorActual: \"\",\n    web3: null, \n    accounts: null, \n    contract: null \n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = EscribirEnLaBlockchain.networks[networkId];\n      const instance = new web3.eth.Contract(\n        EscribirEnLaBlockchain.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n\n      const response = await this.state.contract.method.Leer().call();\n      this.setState({\n        valorActual :response\n      })\n\n     \n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    /*const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });*/\n  };\n\n  render() {\n   if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n       <h1>EscribirEnLaBlockchain mundo </h1>\n       <label>El valor en la blodckchain es:{this.state.ValorActual}</label>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}