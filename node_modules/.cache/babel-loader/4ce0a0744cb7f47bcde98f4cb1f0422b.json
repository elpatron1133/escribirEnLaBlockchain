{"ast":null,"code":"var _jsxFileName = \"/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js\";\nimport React, { Component } from \"react\";\nimport EscribirEnLaBlockchain from \"./contracts/EscribirEnLaBlockchain.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      valorActual: \"\",\n      nuevoValor: \"\",\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = EscribirEnLaBlockchain.networks[networkId];\n        const instance = new web3.eth.Contract(EscribirEnLaBlockchain.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n        const response = await this.state.contract.methods.Leer().call();\n        this.setState({\n          valorActual: response\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.storeValue = async event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract;\n\n      try {\n        // Stores a new value in blockchain\n        await contract.methods.Escribir(this.state.nuevoValor).send({\n          from: accounts[0]\n        });\n        const response = await this.state.contract.methods.Leer().call();\n        this.setState({\n          valorActual: response\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(error);\n        console.error(error);\n      }\n    };\n\n    this.handleChangevalue = event => {\n      this.setState({\n        nuevoValor: event.target.value\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Cargando Web3, cuentas, y contratos..\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/elpatron33/Documentos/solidyti/PAGINA/src/App.js"],"names":["React","Component","EscribirEnLaBlockchain","getWeb3","App","state","valorActual","nuevoValor","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","response","methods","Leer","call","error","alert","console","storeValue","event","preventDefault","Escribir","send","from","handleChangevalue","target","value","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport EscribirEnLaBlockchain from \"./contracts/EscribirEnLaBlockchain.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    valorActual: \"\",\n    nuevoValor: \"\",\n    web3: null, \n    accounts: null, \n    contract: null \n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = EscribirEnLaBlockchain.networks[networkId];\n      const instance = new web3.eth.Contract(\n        EscribirEnLaBlockchain.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n\n      const response = await this.state.contract.methods.Leer().call();\n      this.setState({\n        valorActual :response\n      })\n\n     \n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  storeValue = async (event) => {\n    event.preventDefault();\n\n    const { accounts, contract } = this.state;\n\n    try{\n          // Stores a new value in blockchain\n        await contract.methods.Escribir(this.state.nuevoValor).send({ from: accounts[0] });\n\n        const response = await this.state.contract.methods.Leer().call();\n        \n        this.setState({\n          valorActual :response\n          })\n    }\n    catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        error\n      );\n      console.error(error);\n    }\n\n    \n  };\n\n  handleChangevalue = (event) => {\n    this.setState ({\n      nuevoValor  : event.target.value\n    })\n  }\n\n  render() {\n   if (!this.state.web3) {\n      return <div>Cargando Web3, cuentas, y contratos..</div>;\n    }\n    return (\n    <div  className=\"App\">\n      \n      <div></div>\n\n</div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}